import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import os
from datetime import datetime
import numpy as np
from signal_generator import generate_signals, calculate_natr
from trading_simulator import run_trading_simulation, TradingSimulator
import optuna_optimizer as wfo_optuna # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
import strategy_objectives # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Streamlit Backtester",
    page_icon="üìà",
    layout="wide"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –ø—Ä–æ–≥–æ–Ω–æ–≤
os.makedirs("profiles", exist_ok=True)
os.makedirs("optimization_runs", exist_ok=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà Streamlit Backtester")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π
col1, col2, col3 = st.sidebar.columns(3)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ session_state –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
current_page = st.session_state.get("page", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

with col1:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–ê–Ω–∞–ª–∏–∑", key="nav_analyze", use_container_width=True, type=btn_type):
        st.session_state.page = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
        st.rerun()

with col2:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", key="nav_optimize", use_container_width=True, type=btn_type):
        st.session_state.page = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        st.rerun()

with col3:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", key="nav_analytics", use_container_width=True, type=btn_type):
        st.session_state.page = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        st.rerun()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
def get_profile_directory(module):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ –º–æ–¥—É–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –æ–¥–∏–Ω –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
    if module not in ["analysis", "optimization"]:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–æ–¥—É–ª—å: {module}")
    return f"profiles/{module}"

def save_profile(profile_name, data, module):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ JSON-—Ñ–∞–π–ª"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not profile_name or not isinstance(profile_name, str):
        st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        return False
    
    if not data or not isinstance(data, dict):
        st.error("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        return False
    
    try:
        directory = get_profile_directory(module)
        os.makedirs(directory, exist_ok=True)
        file_path = os.path.join(directory, f"{profile_name}.json")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        st.success(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return False

@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def load_profile(profile_name, module):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not profile_name or not isinstance(profile_name, str):
        st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        return None
    
    try:
        directory = get_profile_directory(module)
        file_path = os.path.join(directory, f"{profile_name}.json")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not isinstance(data, dict):
            st.error(f"–§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
            
        return data
    except FileNotFoundError:
        st.error(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        st.error(f"–§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return None

@st.cache_data(ttl=10)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
def get_profiles(module):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    try:
        directory = get_profile_directory(module)
        profiles = [f.replace('.json', '') for f in os.listdir(directory) if f.endswith('.json')]
        return profiles
    except FileNotFoundError:
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state
def load_profile_to_session_state(profile_data, module):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not profile_data or not isinstance(profile_data, dict):
        st.error("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        return False
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if 'selected_files' in profile_data:
            selected_files_from_profile = profile_data['selected_files']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤
            all_csv_files = []
            try:
                all_csv_files = [f for f in os.listdir("dataCSV") if f.endswith(".csv")]
            except FileNotFoundError:
                st.warning("–ü–∞–ø–∫–∞ dataCSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤.")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
            for csv_file in all_csv_files:
                is_selected = csv_file in selected_files_from_profile
                st.session_state[f"csv_{module}_{csv_file}"] = is_selected

        for key, value in profile_data.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á - —Å—Ç—Ä–æ–∫–∞
            if not isinstance(key, str):
                st.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∫–ª—é—á–∞: {key}")
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime.date, –µ—Å–ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
            if key in ["start_date", "end_date"] and isinstance(value, str):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime.date
                    date_obj = datetime.strptime(value.split()[0], "%Y-%m-%d").date()
                    st.session_state[f"{key}_{module}"] = date_obj
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    st.session_state[f"{key}_{module}"] = value
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è –¥–ª—è enable_additional_filters
            elif key == "enable_additional_filters" and isinstance(value, bool):
                st.session_state[f"enable_additional_filters_{module}"] = value
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ enable_additional_filters_min –∏ enable_additional_filters_max –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            elif key == "enable_additional_filters_min" and isinstance(value, bool):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è radio-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ min –∏ max –∑–Ω–∞—á–µ–Ω–∏–π
                max_value = profile_data.get("enable_additional_filters_max", not value)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ max –∑–Ω–∞—á–µ–Ω–∏–µ
                if value == False and max_value == False:
                    st.session_state["enable_additional_filters_option"] = "False"
                elif value == True and max_value == True:
                    st.session_state["enable_additional_filters_option"] = "True"
                else:  # value == False and max_value == True (–∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç "Both")
                    st.session_state["enable_additional_filters_option"] = "Both"
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤
            elif key in ["prints_threshold_ratio", "prints_analysis_period",
                         "prints_threshold_ratio_min", "prints_threshold_ratio_max"]:
                st.session_state[f"{key}_{module}"] = value
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ hldir_window
            elif key in ["hldir_window", "hldir_window_min", "hldir_window_max", "use_hldir"]:
                st.session_state[f"{key}_{module}"] = value
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ enable_additional_filters_max (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É—Å–ª–æ–≤–∏–∏, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
            elif key == "enable_additional_filters_max":
                # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É—Å–ª–æ–≤–∏–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ min
                pass
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ aggressive_mode
            elif key == "aggressive_mode":
                pass
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ enable_additional_filters_min –∏ enable_additional_filters_max –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ session_state
            elif key in ["enable_additional_filters_min", "enable_additional_filters_max", "entry_logic_mode", "hldir_offset_min", "hldir_offset_max"]:
                # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                st.session_state[f"{key}_optimization"] = value
            else:
                st.session_state[f"{key}_{module}"] = value
             
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state: {str(e)}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
def process_single_file(file, module=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞"""
    file_path = os.path.join("dataCSV", file)
    with open(file_path, 'rb') as f:
        uploaded_file = f
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ CSV-—Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            df = pd.read_csv(uploaded_file, header=0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            expected_columns = ['Symbol', 'time', 'open', 'high', 'low', 'close', 'Volume', 'HLdir', 'long_prints', 'short_prints']
            if not all(col in df.columns for col in expected_columns):
                st.error(f"–§–∞–π–ª {file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ù–∞–π–¥–µ–Ω—ã: {list(df.columns)}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            required_numeric_cols = ['time', 'open', 'high', 'low', 'close', 'Volume']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            numeric_series_dict = {}
            for col in required_numeric_cols:
                numeric_series = pd.to_numeric(df[col], errors='coerce')
                if not numeric_series.notna().all():
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    invalid_indices = df[numeric_series.isna()].index.tolist()
                    st.error(f"–§–∞–π–ª {file} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±—Ü–µ {col} –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö: {invalid_indices[:5]}{' –∏ –¥—Ä.' if len(invalid_indices) > 5 else ''}")
                    return None
                numeric_series_dict[col] = numeric_series
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            positive_cols = ['open', 'high', 'low', 'close', 'Volume']
            for col in positive_cols:
                if (df[col] <= 0).any():
                    invalid_indices = df[df[col] <= 0].index.tolist()
                    st.error(f"–§–∞–π–ª {file} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (‚â§ 0) –≤ —Å—Ç–æ–ª–±—Ü–µ {col} –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö: {invalid_indices[:5]}{' –∏ –¥—Ä.' if len(invalid_indices) > 5 else ''}")
                    return None
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞
            df = df.rename(columns={'Volume': 'volume'})
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ DataFrame
            required_columns = ['time', 'open', 'high', 'low', 'close', 'volume']
            for col in required_columns:
                if col not in df.columns:
                    st.error(f"–§–∞–π–ª {file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: {col}")
                    return None
            
            # –ï—Å–ª–∏ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ —Å—Ç–æ–ª–±—Ü–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            additional_columns = ['close_time', 'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore']
            for col in additional_columns:
                if col not in df.columns:
                    df[col] = 0  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ï—Å–ª–∏ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü 'datetime', —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ 'time'
            if 'datetime' not in df.columns:
                df['datetime'] = pd.to_datetime(df['time'], unit='s')
            
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ
            expected_order = ['time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                             'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume',
                             'taker_buy_quote_asset_volume', 'ignore', 'Symbol', 'HLdir', 'long_prints', 'short_prints', 'datetime']
            df = df.reindex(columns=[col for col in expected_order if col in df.columns])
            
            pass
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame
            return df
            
        except pd.errors.EmptyDataError:
            st.error(f"–§–∞–π–ª {file} –ø—É—Å—Ç–æ–π")
        except pd.errors.ParserError:
            st.error(f"–§–∞–π–ª {file} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
    
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSV-—Ñ–∞–π–ª–æ–≤
def load_and_validate_csv_files(selected_files, module=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤"""
    dataframes = []
    for file in selected_files:
        df = process_single_file(file, module)
        if df is not None:
            dataframes.append(df)
    return dataframes
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Ç–∞–∫ –∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
def get_common_parameters(module, is_optimization=False):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    Args:
        module: —Å—Ç—Ä–æ–∫–∞ –º–æ–¥—É–ª—è ('analysis' –∏–ª–∏ 'optimization')
        is_optimization: —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–ª—é—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if is_optimization:
        min_suffix = "_min"
        max_suffix = "_max"
        min_label = " (min)"
        max_label = " (max)"
    else:
        min_suffix = ""
        max_suffix = ""
        min_label = ""
        max_label = ""

    # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∞–π–¥–±–∞—Ä–µ - –∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    st.markdown("**üìä –§–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞**")
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            vol_pctl_min = st.number_input(f"vol_pctl (%) (min)", value=float(st.session_state.get("vol_pctl_min_optimization", 0.5)), min_value=0.01, step=0.01, key="vol_pctl_min_optimization")
            vol_pctl = vol_pctl_min
        else:
            vol_pctl = st.number_input("vol_pctl (%)", value=float(st.session_state.get(f"vol_pctl_{module}", 1.0)), min_value=0.01, step=0.01, key=f"vol_pctl_{module}")
    with col2:
        if is_optimization:
            vol_period_min = st.number_input("vol_period (min)", value=int(st.session_state.get("vol_period_min_optimization", 10)), min_value=1, step=1, key="vol_period_min_optimization")
            vol_period = vol_period_min
        else:
            vol_period = st.number_input("vol_period", value=int(st.session_state.get(f"vol_period_{module}", 20)), min_value=1, step=1, key=f"vol_period_{module}")

    # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º max –∑–Ω–∞—á–µ–Ω–∏—è
    if is_optimization:
        col1, col2 = st.columns(2)
        with col1:
            vol_pctl_max = st.number_input(f"vol_pctl (%) (max)", value=float(st.session_state.get("vol_pctl_max_optimization", 2.0)), min_value=0.01, step=0.01, key="vol_pctl_max_optimization")
        with col2:
            vol_period_max = st.number_input("vol_period (max)", value=int(st.session_state.get("vol_period_max_optimization", 30)), min_value=1, step=1, key="vol_period_max_optimization")

    st.markdown("**üìè –§–∏–ª—å—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞**")
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            rng_pctl_min = st.number_input(f"rng_pctl (%) (min)", value=float(st.session_state.get("rng_pctl_min_optimization", 0.5)), min_value=0.01, step=0.01, key="rng_pctl_min_optimization")
            rng_pctl = rng_pctl_min
        else:
            rng_pctl = st.number_input("rng_pctl (%)", value=float(st.session_state.get(f"rng_pctl_{module}", 1.0)), min_value=0.01, step=0.01, key=f"rng_pctl_{module}")
    with col2:
        if is_optimization:
            range_period_min = st.number_input("range_period (min)", value=int(st.session_state.get("range_period_min_optimization", 10)), min_value=1, step=1, key="range_period_min_optimization")
            range_period = range_period_min
        else:
            range_period = st.number_input("range_period", value=int(st.session_state.get(f"range_period_{module}", 20)), min_value=1, step=1, key=f"range_period_{module}")

    if is_optimization:
        col1, col2 = st.columns(2)
        with col1:
            rng_pctl_max = st.number_input(f"rng_pctl (%) (max)", value=float(st.session_state.get("rng_pctl_max_optimization", 2.0)), min_value=0.01, step=0.01, key="rng_pctl_max_optimization")
        with col2:
            range_period_max = st.number_input("range_period (max)", value=int(st.session_state.get("range_period_max_optimization", 30)), min_value=1, step=1, key="range_period_max_optimization")

    st.markdown("**üìâ –§–∏–ª—å—Ç—Ä NATR**")
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            natr_min_min = st.number_input(f"natr_min (%) (min)", value=float(st.session_state.get("natr_min_min_optimization", 0.2)), min_value=0.01, step=0.01, key="natr_min_min_optimization")
            natr_min = natr_min_min
        else:
            natr_min = st.number_input("natr_min (%)", value=float(st.session_state.get(f"natr_min_{module}", 0.35)), min_value=0.01, step=0.01, key=f"natr_min_{module}")
    with col2:
        if is_optimization:
            natr_period_min = st.number_input("natr_period (min)", value=int(st.session_state.get("natr_period_min_optimization", 5)), min_value=1, step=1, key="natr_period_min_optimization")
            natr_period = natr_period_min
        else:
            natr_period = st.number_input("natr_period", value=int(st.session_state.get(f"natr_period_{module}", 10)), min_value=1, step=1, key=f"natr_period_{module}")

    if is_optimization:
        col1, col2 = st.columns(2)
        with col1:
            natr_min_max = st.number_input(f"natr_min (%) (max)", value=float(st.session_state.get("natr_min_max_optimization", 0.8)), min_value=0.01, step=0.01, key="natr_min_max_optimization")
        with col2:
            natr_period_max = st.number_input("natr_period (max)", value=int(st.session_state.get("natr_period_max_optimization", 20)), min_value=1, step=1, key="natr_period_max_optimization")

    st.markdown("**üìà –§–∏–ª—å—Ç—Ä —Ä–æ—Å—Ç–∞**")
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            min_growth_pct_min = st.number_input(f"min_growth_pct (%) (min)", value=st.session_state.get("min_growth_pct_min_optimization", 0.5), min_value=-100.0, max_value=100.0, step=0.01, key="min_growth_pct_min_optimization")
            min_growth_pct = min_growth_pct_min
        else:
            min_growth_pct = st.number_input("min_growth_pct (%)", value=st.session_state.get(f"min_growth_pct_{module}", 1.0), min_value=-100.0, max_value=100.0, step=0.01, key=f"min_growth_pct_{module}")
    with col2:
        if is_optimization:
            lookback_period_min = st.number_input("lookback_period (min)", value=int(st.session_state.get("lookback_period_min_optimization", 10)), min_value=1, step=1, key="lookback_period_min_optimization")
            lookback_period = lookback_period_min
        else:
            lookback_period = st.number_input("lookback_period", value=int(st.session_state.get(f"lookback_period_{module}", 20)), min_value=1, step=1, key=f"lookback_period_{module}")

    if is_optimization:
        col1, col2 = st.columns(2)
        with col1:
            min_growth_pct_max = st.number_input(f"min_growth_pct (%) (max)", value=st.session_state.get("min_growth_pct_max_optimization", 2.0), min_value=-100.0, max_value=100.0, step=0.01, key="min_growth_pct_max_optimization")
        with col2:
            lookback_period_max = st.number_input("lookback_period (max)", value=st.session_state.get("lookback_period_max_optimization", 30), min_value=1, step=1, key="lookback_period_max_optimization")

    st.markdown("**üñ®Ô∏è –§–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω—Ç–æ–≤**")
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            # –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
            prints_analysis_mode_min = 1  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º 1
            prints_analysis_mode = prints_analysis_mode_min
        else:
            # –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
            prints_analysis_mode = 1  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º 1
    with col2:
        if is_optimization:
            # –£–±–∏—Ä–∞–µ–º max –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º 1
            prints_analysis_mode_max = 1  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º 1
        else:
            prints_threshold_ratio = st.number_input("prints_threshold_ratio", value=st.session_state.get(f"prints_threshold_ratio_{module}", 1.0), min_value=0.01, step=0.01, key=f"prints_threshold_ratio_{module}_analysis")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ UnboundLocalError
    if is_optimization:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        prints_threshold_ratio_min = st.session_state.get("prints_threshold_ratio_min_optimization", 0.5)
        prints_threshold_ratio_max = st.session_state.get("prints_threshold_ratio_max_optimization", 2.0)
        prints_analysis_period_min = int(st.session_state.get("prints_analysis_period_min_optimization", 1))
        prints_analysis_period_max = int(st.session_state.get("prints_analysis_period_max_optimization", 5))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        col1, col2 = st.columns(2)
        with col1:
            prints_threshold_ratio_min = st.number_input("prints_threshold_ratio (min)", value=float(st.session_state.get("prints_threshold_ratio_min_optimization", 0.5)), min_value=0.01, step=0.01, key="prints_threshold_ratio_min_optimization")
            prints_analysis_period_min = st.number_input("prints_analysis_period (min)", value=int(st.session_state.get("prints_analysis_period_min_optimization", 1)), min_value=1, step=1, key="prints_analysis_period_min_optimization")
        with col2:
            prints_threshold_ratio_max = st.number_input("prints_threshold_ratio (max)", value=float(st.session_state.get("prints_threshold_ratio_max_optimization", 2.0)), min_value=0.01, step=0.01, key="prints_threshold_ratio_max_optimization")
            prints_analysis_period_max = st.number_input("prints_analysis_period (max)", value=int(st.session_state.get("prints_analysis_period_max_optimization", 5)), min_value=1, step=1, key="prints_analysis_period_max_optimization")
    else:
        # –î–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞
        prints_analysis_period = st.number_input("prints_analysis_period", value=int(st.session_state.get(f"prints_analysis_period_{module}", 2)), min_value=1, step=1, key=f"prints_analysis_period_{module}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if is_optimization:
        st.markdown("**üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º**")
    else:
        st.markdown("**üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
    
    col1, col2 = st.columns(2)
    with col1:
        if is_optimization:
            stop_loss_pct_min = st.number_input("stop_loss_pct (%) (min)", value=float(st.session_state.get("stop_loss_pct_min_optimization", 1.0)), min_value=0.01, step=0.01, format="%.2f", key="stop_loss_pct_min_optimization")
            stop_loss_pct = stop_loss_pct_min
        else:
            stop_loss_pct = st.number_input("stop_loss_pct (%)", value=float(st.session_state.get(f"stop_loss_pct_{module}", 2.0)), min_value=0.01, step=0.01, format="%.2f", key=f"stop_loss_pct_{module}")
    with col2:
        if is_optimization:
            take_profit_pct_min = st.number_input("take_profit_pct (%) (min)", value=float(st.session_state.get("take_profit_pct_min_optimization", 1.0)), min_value=0.01, step=0.01, format="%.2f", key="take_profit_pct_min_optimization")
            take_profit_pct = take_profit_pct_min
        else:
            take_profit_pct = st.number_input("take_profit_pct (%)", value=float(st.session_state.get(f"take_profit_pct_{module}", 4.0)), min_value=0.01, step=0.01, format="%.2f", key=f"take_profit_pct_{module}")

    if is_optimization:
        col1, col2 = st.columns(2)
        with col1:
            stop_loss_pct_max = st.number_input("stop_loss_pct (%) (max)", value=float(st.session_state.get("stop_loss_pct_max_optimization", 5.0)), min_value=0.01, step=0.01, format="%.2f", key="stop_loss_pct_max_optimization")
        with col2:
            take_profit_pct_max = st.number_input("take_profit_pct (%) (max)", value=float(st.session_state.get("take_profit_pct_max_optimization", 8.0)), min_value=0.01, step=0.01, format="%.2f", key="take_profit_pct_max_optimization")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if is_optimization:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è enable_additional_filters —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –≤ get_optimization_parameters
        # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [False, True]
        pass
    else:
        enable_additional_filters = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
            value=st.session_state.get(f"enable_additional_filters_{module}", False),
            key=f"enable_additional_filters_{module}"
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if is_optimization:
        # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        params = {
            "vol_period_min": vol_period_min,
            "vol_period_max": vol_period_max,
            "vol_pctl_min": vol_pctl_min,
            "vol_pctl_max": vol_pctl_max,
            "range_period_min": range_period_min,
            "range_period_max": range_period_max,
            "rng_pctl_min": rng_pctl_min,
            "rng_pctl_max": rng_pctl_max,
            "natr_period_min": natr_period_min,
            "natr_period_max": natr_period_max,
            "natr_min_min": natr_min_min,
            "natr_min_max": natr_min_max,
            "lookback_period_min": lookback_period_min,
            "lookback_period_max": lookback_period_max,
            "min_growth_pct_min": min_growth_pct_min,
            "min_growth_pct_max": min_growth_pct_max,
            "prints_analysis_period_min": prints_analysis_period_min,
            "prints_analysis_period_max": prints_analysis_period_max,
            "stop_loss_pct_min": stop_loss_pct_min,
            "stop_loss_pct_max": stop_loss_pct_max,
            "take_profit_pct_min": take_profit_pct_min,
            "take_profit_pct_max": take_profit_pct_max
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã hldir_window –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        # –£–±–∏—Ä–∞–µ–º –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if is_optimization:
            # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ session_state
            params["hldir_window_min"] = int(st.session_state.get("hldir_window_min_optimization", 3))
            params["hldir_window_max"] = int(st.session_state.get("hldir_window_max_optimization", 10))
        else:
            # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä hldir_window
            params["hldir_window"] = int(st.session_state.get("hldir_window_analysis", 5))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        params["prints_threshold_ratio_min"] = prints_threshold_ratio_min
        params["prints_threshold_ratio_max"] = prints_threshold_ratio_max
        params["prints_analysis_period_min"] = prints_analysis_period_min
        params["prints_analysis_period_max"] = prints_analysis_period_max
    else:
        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        params = {
            "vol_period": vol_period,
            "vol_pctl": vol_pctl,
            "range_period": range_period,
            "rng_pctl": rng_pctl,
            "natr_period": natr_period,
            "natr_min": natr_min,
            "lookback_period": lookback_period,
            "min_growth_pct": min_growth_pct,
            "prints_analysis_period": prints_analysis_period,
            "stop_loss_pct": stop_loss_pct,
            "take_profit_pct": take_profit_pct,
            "enable_additional_filters": enable_additional_filters
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä hldir_window –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        entry_logic_mode = st.session_state.get(f"entry_logic_mode_{module}", "–ü—Ä–∏–Ω—Ç—ã –∏ HLdir")
        if "HLdir" in entry_logic_mode:
            params["hldir_window"] = st.session_state.get(f"hldir_window_{module}", 10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º 1 - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        params["prints_threshold_ratio"] = prints_threshold_ratio
        params["prints_analysis_period"] = prints_analysis_period

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for param_name, param_value in params.items():
        if param_value is None:
            st.warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

    # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ min –Ω–µ –±–æ–ª—å—à–µ max
    if is_optimization:
        param_items = list(params.items())
        for i in range(0, len(param_items), 2):
            if i+1 < len(param_items):
                min_param, min_value = param_items[i]
                max_param, max_value = param_items[i+1]
                
                # –î–ª—è –ø–∞—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ min/max –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                if min_param.endswith('_min') and max_param.endswith('_max'):
                    # –î–ª—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: –µ—Å–ª–∏ min=True –∏ max=False, —ç—Ç–æ –æ—à–∏–±–∫–∞
                    # –ù–æ –µ—Å–ª–∏ min=False –∏ max=True, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
                    if isinstance(min_value, bool) and isinstance(max_value, bool):
                        if min_value and not max_value:
                            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è enable_additional_filters - –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            if min_param != "enable_additional_filters_min":
                                st.warning(f"–î–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {min_param} ({min_value}) > {max_param} ({max_value})")
                # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
                elif min_value > max_value:
                    st.warning(f"–î–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {min_param} ({min_value}) > {max_param} ({max_value})")

    return params

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
def get_strategy_parameters(module):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    return get_common_parameters(module, is_optimization=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
def get_optimization_parameters():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω—ã) –¥–ª—è –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    return get_common_parameters("optimization", is_optimization=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è –æ–±–æ–∏—Ö –º–æ–¥—É–ª–µ–π)
def get_basic_settings(module):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è"""
    col1, col2 = st.columns(2)
    with col1:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ session_state, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if f"position_size_{module}" not in st.session_state:
            st.session_state[f"position_size_{module}"] = 100.0
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
        position_size = st.number_input("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏", value=round(float(st.session_state[f"position_size_{module}"]), 2), step=10.0, key=f"position_size_{module}")
    with col2:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ session_state, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if f"commission_{module}" not in st.session_state:
            st.session_state[f"commission_{module}"] = 0.1
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
        commission = st.number_input("–ö–æ–º–∏—Å—Å–∏—è (%)", value=round(float(st.session_state[f"commission_{module}"]), 3), step=0.01, key=f"commission_{module}")
    col1, col2 = st.columns(2)
    with col1:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ session_state, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if f"start_date_{module}" not in st.session_state:
            st.session_state[f"start_date_{module}"] = datetime(2025, 9, 1).date()
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", value=st.session_state[f"start_date_{module}"], key=f"start_date_{module}")
    with col2:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ session_state, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if f"end_date_{module}" not in st.session_state:
            st.session_state[f"end_date_{module}"] = datetime(2025, 9, 26).date()
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=st.session_state[f"end_date_{module}"], key=f"end_date_{module}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    aggressive_mode = st.checkbox(
        "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
        value=st.session_state.get(f"aggressive_mode_{module}", False),
        key=f"aggressive_mode_{module}",
        help="–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –µ—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª."
    )
    return position_size, commission, start_date, end_date

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ (–¥–ª—è –æ–±–æ–∏—Ö –º–æ–¥—É–ª–µ–π)
def manage_profiles(module, params_func):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    st.subheader("–ü—Ä–æ—Ñ–∏–ª–∏")
    col1, col2 = st.columns(2)
    with col1:
        profile_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", key=f"profile_name_{module}")
        if st.button(f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å {'–ø—Ä–æ—Ñ–∏–ª—å' if module == 'analysis' else '–¥–∏–∞–ø–∞–∑–æ–Ω—ã'}", key=f"save_profile_{module}"):
            if profile_name:
                # –°–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                profile_data = {
                    "position_size": st.session_state.get(f"position_size_{module}", 1000.0),
                    "commission": st.session_state.get(f"commission_{module}", 0.1),
                    "entry_logic_mode": st.session_state.get(f"entry_logic_mode_{module}", "–ü—Ä–∏–Ω—Ç—ã –∏ HLdir"),
                    "hldir_offset": st.session_state.get(f"hldir_offset_{module}", 0),
                    "aggressive_mode": st.session_state.get(f"aggressive_mode_{module}", False),
                    "start_date": str(st.session_state.get(f"start_date_{module}", datetime(2025, 9, 1))),
                    "end_date": str(st.session_state.get(f"end_date_{module}", datetime(2025, 9, 26)))
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                selected_files_key = f"selected_files_{module}"
                profile_data["selected_files"] = st.session_state.get(selected_files_key, [])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
                if module == "analysis":
                    # –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ session_state –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
                    profile_data.update({
                        "vol_period": st.session_state.get("vol_period_analysis", 20),
                        "vol_pctl": round(st.session_state.get("vol_pctl_analysis", 1.0), 2),
                        "range_period": st.session_state.get("range_period_analysis", 20),
                        "rng_pctl": round(st.session_state.get("rng_pctl_analysis", 1.0), 2),
                        "natr_period": st.session_state.get("natr_period_analysis", 10),
                        "natr_min": round(st.session_state.get("natr_min_analysis", 0.35), 2),
                        "lookback_period": st.session_state.get("lookback_period_analysis", 20),
                        "min_growth_pct": round(st.session_state.get("min_growth_pct_analysis", 1.0), 2),
                        "prints_analysis_period": st.session_state.get("prints_analysis_period_analysis", 2),
                        "stop_loss_pct": round(st.session_state.get("stop_loss_pct_analysis", 2.0), 2),
                        "take_profit_pct": round(st.session_state.get("take_profit_pct_analysis", 4.0), 2),
                        "enable_additional_filters": st.session_state.get("enable_additional_filters_analysis", True)
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º 1 - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
                    profile_data["prints_threshold_ratio"] = round(st.session_state.get("prints_threshold_ratio_analysis", 1.0), 2)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä hldir_window, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                    if "HLdir" in st.session_state.get("entry_logic_mode_analysis", ""):
                        profile_data["hldir_window"] = st.session_state.get("hldir_window_analysis", 10)
                        profile_data["hldir_offset"] = st.session_state.get("hldir_offset_analysis", 0)
                else: # optimization
                    # –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞—é—â–µ–π –≤–∏–¥–∂–µ—Ç—ã
                    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –≤—ã–∑–æ–≤–∞ Streamlit-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ radio-–∫–Ω–æ–ø–∫–∏ –¥–ª—è enable_additional_filters
                    enable_additional_filters_option = st.session_state.get("enable_additional_filters_option", "Both")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è min –∏ max –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                    if enable_additional_filters_option == "False":
                        enable_additional_filters_min = False
                        enable_additional_filters_max = False
                    elif enable_additional_filters_option == "True":
                        enable_additional_filters_min = True
                        enable_additional_filters_max = True
                    else:  # Both
                        enable_additional_filters_min = False
                        enable_additional_filters_max = True
                    
                    profile_data.update({
                        "vol_period_min": st.session_state.get("vol_period_min_optimization", 10),
                        "vol_period_max": st.session_state.get("vol_period_max_optimization", 30),
                        "vol_pctl_min": round(st.session_state.get("vol_pctl_min_optimization", 0.5), 2),
                        "vol_pctl_max": round(st.session_state.get("vol_pctl_max_optimization", 2.0), 2),
                        "range_period_min": st.session_state.get("range_period_min_optimization", 10),
                        "range_period_max": st.session_state.get("range_period_max_optimization", 30),
                        "rng_pctl_min": round(st.session_state.get("rng_pctl_min_optimization", 0.5), 2),
                        "rng_pctl_max": round(st.session_state.get("rng_pctl_max_optimization", 2.0), 2),
                        "natr_period_min": st.session_state.get("natr_period_min_optimization", 5),
                        "natr_period_max": st.session_state.get("natr_period_max_optimization", 20),
                        "natr_min_min": round(st.session_state.get("natr_min_min_optimization", 0.2), 2),
                        "natr_min_max": round(st.session_state.get("natr_min_max_optimization", 0.8), 2),
                        "lookback_period_min": st.session_state.get("lookback_period_min_optimization", 10),
                        "lookback_period_max": st.session_state.get("lookback_period_max_optimization", 30),
                        "min_growth_pct_min": round(st.session_state.get("min_growth_pct_min_optimization", 0.5), 2),
                        "min_growth_pct_max": round(st.session_state.get("min_growth_pct_max_optimization", 2.0), 2),
                        "prints_analysis_period_min": st.session_state.get("prints_analysis_period_min_optimization", 1),
                        "prints_analysis_period_max": st.session_state.get("prints_analysis_period_max_optimization", 5),
                        "stop_loss_pct_min": round(st.session_state.get("stop_loss_pct_min_optimization", 1.0), 2),
                        "stop_loss_pct_max": round(st.session_state.get("stop_loss_pct_max_optimization", 5.0), 2),
                        "take_profit_pct_min": round(st.session_state.get("take_profit_pct_min_optimization", 1.0), 2),
                        "take_profit_pct_max": round(st.session_state.get("take_profit_pct_max_optimization", 8.0), 2),
                        "enable_additional_filters_min": enable_additional_filters_min,
                        "enable_additional_filters_max": enable_additional_filters_max
                    })
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω—Ç–æ–≤ –∏ HLdir —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –º–µ—Ö–∞–Ω–∏–∑–º

                profile_data["name"] = profile_name
                save_profile(profile_name, profile_data, module)
            else:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    with col2:
        profiles = get_profiles(module)
        selected_profile = st.selectbox(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {'–ø—Ä–æ—Ñ–∏–ª—å' if module == 'analysis' else '–¥–∏–∞–ø–∞–∑–æ–Ω—ã'}", options=profiles, key=f"select_profile_{module}")
        if st.button(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {'–ø—Ä–æ—Ñ–∏–ª—å' if module == 'analysis' else '–¥–∏–∞–ø–∞–∑–æ–Ω—ã'}", key=f"load_profile_{module}") and selected_profile:
            profile_data = load_profile(selected_profile, module)
            if profile_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è session_state –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
                st.session_state["profile_to_load"] = profile_data
                st.session_state["page_to_rerun"] = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤" if module == "analysis" else "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
                st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state
def handle_profile_loading():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if "profile_to_load" in st.session_state:
        profile_data = st.session_state["profile_to_load"]
        page_to_rerun = st.session_state.get("page_to_rerun")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ session_state –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
        del st.session_state["profile_to_load"]
        if "page_to_rerun" in st.session_state:
            del st.session_state["page_to_rerun"]
        
        if page_to_rerun == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            load_profile_to_session_state(profile_data, "analysis")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "hldir_window" in profile_data:
                st.session_state["hldir_window_analysis"] = profile_data["hldir_window"]
            
            profile_name = profile_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            st.success(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if profile_name.startswith("temp_analysis_"):
                try:
                    import os
                    profile_path = os.path.join("profiles", "analysis", f"{profile_name}.json")
                    if os.path.exists(profile_path):
                        os.remove(profile_path)
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {str(e)}")
                
        elif page_to_rerun == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            load_profile_to_session_state(profile_data, "optimization")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "hldir_window_min" in profile_data:
                st.session_state["hldir_window_min_optimization"] = profile_data["hldir_window_min"]
            if "hldir_window_max" in profile_data:
                st.session_state["hldir_window_max_optimization"] = profile_data["hldir_window_max"]
            
            st.success(f"–î–∏–∞–ø–∞–∑–æ–Ω—ã '{profile_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã—Ö–æ–¥–∏–º
            return
            
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–¥–∂–µ—Ç–æ–≤
        st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
@st.cache_data(ttl=10)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
def get_optimization_run_files():
    try:
        files = [f for f in os.listdir("optimization_runs") if f.endswith('.json')]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        # –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: run_YYYYMMDD_HHMMSS.json
        def extract_datetime(f):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                # –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: run_YYYYMMDD_HHMMSS_... –∏–ª–∏ run_YYYYMMDD_HHMMSS.json
                datetime_str = f.replace('run_', '').replace('.json', '')
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º: YYYYMMDD_HHMMSS
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ _ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏)
                parts = datetime_str.split('_', 1)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏: –≤—Ä–µ–º—è –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                time_part = parts[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–¥–∞—Ç—É_–≤—Ä–µ–º—è)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –æ–±—ä–µ–∫—Ç
                return datetime.strptime(time_part, '%Y%m%d_%H%M%S')
            except ValueError:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                return datetime.min
         
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã, –∑–∞—Ç–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
        sorted_files = sorted(files, key=extract_datetime)
        return sorted_files[::-1]  # –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–≤–µ—Ä—Ö—É
    except FileNotFoundError:
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def load_run_data_cached(run_file):
    file_path = os.path.join("optimization_runs", run_file)
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –ø—Ä–æ–≥–æ–Ω–∞ '{run_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError:
        st.error(f"–§–∞–π–ª –ø—Ä–æ–≥–æ–Ω–∞ '{run_file}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥–æ–Ω–∞ '{run_file}': {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if current_page == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    handle_profile_loading()
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∫–ª—é—á–∞—è aggressive_mode
        position_size, commission, start_date, end_date = get_basic_settings("analysis")

        # –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è)
        manage_profiles("analysis", get_strategy_parameters)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤—Å–µ–≥–æ 12)
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞
        entry_logic_mode_analysis = st.radio(
            "–õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞",
            options=["–ü—Ä–∏–Ω—Ç—ã –∏ HLdir", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º", "–¢–æ–ª—å–∫–æ –ø–æ HLdir"],
            index=["–ü—Ä–∏–Ω—Ç—ã –∏ HLdir", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º", "–¢–æ–ª—å–∫–æ –ø–æ HLdir"].index(st.session_state.get("entry_logic_mode_analysis", "–ü—Ä–∏–Ω—Ç—ã –∏ HLdir")),
            key="entry_logic_mode_analysis",
            help="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥—É—Ç —Å–æ—á–µ—Ç–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É."
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã HLdir —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã HLdir** (–¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å HLdir)")
        col1, col2 = st.columns(2)
        with col1:
            hldir_window = st.number_input(
                "–û–∫–Ω–æ HLdir",
                value=int(st.session_state.get("hldir_window_analysis", 10)),
                min_value=1,
                step=1,
                key="hldir_window_analysis"
            )
        with col2:
            hldir_offset = st.number_input(
                "–°–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞ HLdir",
                value=int(st.session_state.get("hldir_offset_analysis", 0)),
                min_value=0,
                key="hldir_offset_analysis",
                help="0: –æ–∫–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é —Å–≤–µ—á—É `i`. 1: –æ–∫–Ω–æ –¥–æ `i-1`."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        params = get_strategy_parameters("analysis")
        vol_period = params["vol_period"]
        vol_pctl = round(params["vol_pctl"], 2)
        range_period = params["range_period"]
        rng_pctl = round(params["rng_pctl"], 2)
        natr_period = params["natr_period"]
        natr_min = round(params["natr_min"], 2)
        lookback_period = params["lookback_period"]
        min_growth_pct = round(params["min_growth_pct"], 2)
        prints_analysis_period = params["prints_analysis_period"]
        prints_threshold_ratio = round(params["prints_threshold_ratio"], 2)
        stop_loss_pct = round(params["stop_loss_pct"], 2)
        take_profit_pct = round(params["take_profit_pct"], 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º hldir_window –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params["hldir_window"] = int(hldir_window)
        params["hldir_offset"] = int(hldir_offset)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        update_chart = st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", key="update_chart_sidebar")
        
        # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        csv_files = []
        try:
            for file in os.listdir("dataCSV"):
                if file.endswith(".csv"):
                    csv_files.append(file)
        except FileNotFoundError:
            st.warning("–ü–∞–ø–∫–∞ dataCSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if csv_files:
            with st.expander("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.subheader("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
                select_all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", key="select_all_csv")
                
                # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                selected_files = []
                checkbox_key_prefix = f"csv_analysis_"
                for i, file in enumerate(csv_files):
                    # –ï—Å–ª–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –æ—Ç–º–µ—á–µ–Ω, –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–º–µ—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    # –ò–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if f"{checkbox_key_prefix}{file}" not in st.session_state:
                        # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ select_all
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                    elif st.session_state.get("select_all_csv_prev", not select_all) != select_all:
                        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                    
                    is_selected = st.checkbox(file, key=f"{checkbox_key_prefix}{file}")
                    if is_selected:
                        selected_files.append(file)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                st.session_state["select_all_csv_prev"] = select_all
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ session_state
                st.session_state["selected_files_analysis"] = selected_files
        else:
            st.info("–í –ø–∞–ø–∫–µ dataCSV –Ω–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤")
            st.session_state["selected_files_analysis"] = []
    
    # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
    selected_files = st.session_state.get("selected_files_analysis", [])
    if selected_files:
        st.write(f"–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(selected_files)}")
    else:
        st.write("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å session_state
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # st.rerun() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ get_strategy_parameters
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    dataframes = load_and_validate_csv_files(selected_files, "analysis")
    
    if dataframes:
        try:
            combined_df = pd.concat(dataframes, ignore_index=True)
            combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
            combined_df = combined_df.sort_values('datetime').reset_index(drop=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º combined_df –≤ session_state, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            st.session_state["combined_df_analysis"] = combined_df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            combined_df = None
            st.session_state["combined_df_analysis"] = None
            
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        if combined_df is not None:
            with st.spinner("–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤..."):
                try:
                    signal_indices = generate_signals(combined_df, params)
                    st.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: **{len(signal_indices)}**")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                    signal_indices = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏", key="run_simulation"):
            with st.spinner("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏..."):
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                simulation_params = params.copy()
                simulation_params["position_size"] = round(position_size, 2)
                simulation_params["commission"] = round(commission, 3)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3 –∑–Ω–∞–∫–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑-–∑–∞ –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                simulation_params["stop_loss_pct"] = round(stop_loss_pct, 2)
                simulation_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)
                simulation_params["take_profit_pct"] = round(take_profit_pct, 2)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞ –∏ HLdir, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                simulation_params["entry_logic_mode"] = entry_logic_mode_analysis
                simulation_params["hldir_window"] = hldir_window
                simulation_params["hldir_offset"] = hldir_offset
                                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                simulation_results = run_trading_simulation(combined_df, simulation_params)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                st.session_state["simulation_results"] = simulation_results
                st.session_state["simulation_params"] = simulation_params
                
                st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "simulation_results" in st.session_state:
            results = st.session_state["simulation_results"]
            
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Å–¥–µ–ª–∫–∞–º–∏
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫", key="show_trades_chart"):
                simulator = TradingSimulator(
                    position_size=position_size,
                    commission=commission,
                    stop_loss_pct=stop_loss_pct,
                    take_profit_pct=take_profit_pct
                )
                fig = simulator.plot_trades_on_chart(combined_df, results)
                st.plotly_chart(fig, use_container_width=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            col1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", results['total_trades'])
            col2.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", results['winning_trades'])
            col3.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö", f"{round(results['win_rate']*100, 2):.2f}%")
            col4.metric("–û–±—â–∏–π PnL", f"${results['total_pnl']:.2f}")
            col5.metric("–°—Ä–µ–¥–Ω–∏–π PnL", f"${results['avg_pnl']:.2f}")
            col6.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{round(results['max_drawdown']*100, 2):.2f}%")
                 
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫
            if results['trades']:
                st.subheader("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DataFrame
                trades_data = {
                    '–ò–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–∞': [trade['entry_idx'] for trade in results['trades']],
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': [trade['entry_price'] for trade in results['trades']],
                    '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': [trade['direction'] for trade in results['trades']],
                    '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_price'] for trade in results['trades']],
                    'PnL': [trade['pnl'] for trade in results['trades']],
                    '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_reason'] for trade in results['trades']]
                }
                
                trades_df_display = pd.DataFrame(trades_data)
                
                st.dataframe(trades_df_display)
                 
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å/–±–µ–∑ HLdir
            st.subheader("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤—Ö–æ–¥–∞")
            if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∂–∏–º—ã –≤—Ö–æ–¥–∞", key="compare_hldir"):
                with st.spinner("–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π..."):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    # –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    # –≤ hldir_window/offset, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç. 
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `params`, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ UI.
                    current_params = params.copy()
                    current_params["position_size"] = position_size
                    current_params["commission"] = commission
                    current_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)

                    current_results = st.session_state["simulation_results"]                    
                    current_mode = current_params.get("entry_logic_mode", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Ä–µ–∂–∏–º–æ–≤
                    results_by_mode = {current_mode: current_results}
                    all_modes = ["–ü—Ä–∏–Ω—Ç—ã –∏ HLdir", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º", "–¢–æ–ª—å–∫–æ –ø–æ HLdir"]
                    for mode in all_modes:
                        if mode not in results_by_mode:
                            opposite_params = current_params.copy()
                            opposite_params["entry_logic_mode"] = mode
                            results_by_mode[mode] = run_trading_simulation(combined_df, opposite_params)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    st.session_state['comparison_results_by_mode'] = results_by_mode
                    st.session_state['comparison_current_params'] = current_params
                    st.session_state['comparison_df'] = combined_df
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
                    comparison_data = []
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º all_modes –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
                    for mode in all_modes: 
                        res = results_by_mode[mode]
                        comparison_data.append({
                            "–†–µ–∂–∏–º": mode,
                            "–û–±—â–∏–π PnL": f"${res['total_pnl']:.2f}",
                            "Win Rate": f"{res['win_rate']*100:.2f}%",
                            "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": res['total_trades'],
                            "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞": f"{res['max_drawdown']*100:.2f}%",
                            "Profit Factor": f"{res.get('profit_factor', 0):.2f}"
                        })
                    comparison_df = pd.DataFrame(comparison_data).set_index("–†–µ–∂–∏–º")
                    
                    st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
                    st.table(comparison_df)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞)
            if 'comparison_results_by_mode' in st.session_state:
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏", key="show_comparison_charts"):
                    with st.spinner("–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤..."):
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session_state
                        results_by_mode = st.session_state['comparison_results_by_mode']
                        current_params = st.session_state['comparison_current_params']
                        combined_df = st.session_state['comparison_df']

                        st.subheader("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
                        col1, col2, col3 = st.columns(3)

                        simulator = TradingSimulator(
                            position_size=current_params.get("position_size"),
                            commission=current_params.get("commission"),
                            stop_loss_pct=current_params.get("stop_loss_pct"),
                            take_profit_pct=current_params.get("take_profit_pct"),
                        )

                        def plot_in_col(column, mode_name):
                            with column:
                                st.markdown(f"**{mode_name}**")
                                params_for_plot = current_params.copy()
                                params_for_plot["entry_logic_mode"] = mode_name
                                fig = simulator.plot_trades_on_chart(
                                    combined_df, results_by_mode[mode_name], show_balance=False, params=params_for_plot
                                )
                                st.plotly_chart(fig, use_container_width=True)
                        
                        plot_in_col(col1, "–ü—Ä–∏–Ω—Ç—ã –∏ HLdir")
                        plot_in_col(col2, "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º")
                        plot_in_col(col3, "–¢–æ–ª—å–∫–æ –ø–æ HLdir")

elif current_page == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    handle_profile_loading()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
    selected_files = st.session_state.get("selected_files_optimization", [])
    if selected_files:
        st.write(f"–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(selected_files)}")
    else:
        st.write("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∫–ª—é—á–∞—è aggressive_mode
        position_size, commission, start_date, end_date = get_basic_settings("optimization")

        # –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è)
        manage_profiles("optimization", get_optimization_parameters)
    
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        # –¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è Optuna
        st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è **Optuna**.")
        optimization_type = "optuna"

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        entry_logic_mode_optimization = st.selectbox(
            "–õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            options=["–ü—Ä–∏–Ω—Ç—ã –∏ HLdir", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º", "–¢–æ–ª—å–∫–æ –ø–æ HLdir", "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å"],
            index=0,
            key="entry_logic_mode_optimization"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω hldir_window, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Å HLdir
        if "HLdir" in entry_logic_mode_optimization or entry_logic_mode_optimization == "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å":
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã HLdir**")
            col1, col2 = st.columns(2)
            with col1:
                hldir_window_min = st.number_input(
                    "–û–∫–Ω–æ HLdir (min)",
                    value=int(st.session_state.get("hldir_window_min_optimization", 3)),
                    min_value=1,
                    step=1,
                    key="hldir_window_min_optimization"
                )
                hldir_offset_min = st.number_input(
                    "–°–º–µ—â–µ–Ω–∏–µ (min)",
                    value=int(st.session_state.get("hldir_offset_min_optimization", 0)),
                    min_value=0,
                    key="hldir_offset_min_optimization"
                )
            with col2:
                hldir_window_max = st.number_input(
                    "–û–∫–Ω–æ HLdir (max)",
                    value=int(st.session_state.get("hldir_window_max_optimization", 10)),
                    min_value=1,
                    step=1,
                    key="hldir_window_max_optimization"
                )
                hldir_offset_max = st.number_input(
                    "–°–º–µ—â–µ–Ω–∏–µ (max)",
                    value=int(st.session_state.get("hldir_offset_max_optimization", 2)),
                    min_value=0,
                    key="hldir_offset_max_optimization"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        opt_params = get_optimization_parameters()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º float –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        vol_period_min = opt_params["vol_period_min"]
        vol_period_max = opt_params["vol_period_max"]
        vol_pctl_min = round(opt_params["vol_pctl_min"], 2)
        vol_pctl_max = round(opt_params["vol_pctl_max"], 2)
        range_period_min = opt_params["range_period_min"]
        range_period_max = opt_params["range_period_max"]
        rng_pctl_min = round(opt_params["rng_pctl_min"], 2)
        rng_pctl_max = round(opt_params["rng_pctl_max"], 2)
        natr_period_min = opt_params["natr_period_min"]
        natr_period_max = opt_params["natr_period_max"]
        natr_min_min = round(opt_params["natr_min_min"], 2)
        natr_min_max = round(opt_params["natr_min_max"], 2)
        lookback_period_min = opt_params["lookback_period_min"]
        lookback_period_max = opt_params["lookback_period_max"]
        min_growth_pct_min = round(opt_params["min_growth_pct_min"], 2)
        min_growth_pct_max = round(opt_params["min_growth_pct_max"], 2)
        prints_analysis_period_min = opt_params["prints_analysis_period_min"]
        prints_analysis_period_max = opt_params["prints_analysis_period_max"]
        stop_loss_pct_min = round(opt_params["stop_loss_pct_min"], 2)
        stop_loss_pct_max = round(opt_params["stop_loss_pct_max"], 2)
        take_profit_pct_min = round(opt_params["take_profit_pct_min"], 2)
        take_profit_pct_max = round(opt_params["take_profit_pct_max"], 2)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        prints_threshold_ratio_min = round(opt_params["prints_threshold_ratio_min"], 2)
        prints_threshold_ratio_max = round(opt_params["prints_threshold_ratio_max"], 2)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hldir_window –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        hldir_window_min = int(st.session_state.get("hldir_window_min_optimization", 3))
        hldir_window_max = int(st.session_state.get("hldir_window_max_optimization", 10))
        hldir_offset_min = int(st.session_state.get("hldir_offset_min_optimization", 0))
        hldir_offset_max = int(st.session_state.get("hldir_offset_max_optimization", 2))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–± –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        with col1:
            optuna_trials = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–± Optuna", value=50, min_value=10, step=10, key="optuna_trials")
        with col2:
            wfo_trials = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–± WFO", value=20, min_value=5, step=5, key="wfo_trials")
        
        # –¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ - –≤—ã—Å–æ–∫–∏–π Win Rate.
        st.info("–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: **–í—ã—Å–æ–∫–∏–π Win Rate** (–ø–æ–∏—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫).")

        csv_files = []
        try:
            for file in os.listdir("dataCSV"):
                if file.endswith(".csv"):
                    csv_files.append(file)
        except FileNotFoundError:
            st.warning("–ü–∞–ø–∫–∞ dataCSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if csv_files:
            with st.expander("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.subheader("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
                select_all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", key="select_all_csv_optimization")
                
                # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                selected_files = []
                checkbox_key_prefix = f"csv_optimization_"
                for i, file in enumerate(csv_files):
                    # –ï—Å–ª–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –æ—Ç–º–µ—á–µ–Ω, –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–º–µ—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    # –ò–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if f"{checkbox_key_prefix}{file}" not in st.session_state:
                        # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ select_all
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                    elif st.session_state.get("select_all_csv_optimization_prev", not select_all) != select_all:
                        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                    
                    is_selected = st.checkbox(file, key=f"{checkbox_key_prefix}{file}")
                    if is_selected:
                        selected_files.append(file)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                st.session_state["select_all_csv_optimization_prev"] = select_all
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ session_state
                st.session_state["selected_files_optimization"] = selected_files
        else:
            st.info("–í –ø–∞–ø–∫–µ dataCSV –Ω–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤")
            st.session_state["selected_files_optimization"] = []
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤
        dataframes = load_and_validate_csv_files(selected_files, "optimization")
            
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –≤—ã—Å–æ–∫–∏–π Win Rate.
    objective_func = strategy_objectives.trading_strategy_objective_high_win_rate

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not dataframes:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            combined_df = pd.concat(dataframes, ignore_index=True)
            combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
            combined_df = combined_df.sort_values('datetime').reset_index(drop=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ radio-–∫–Ω–æ–ø–∫–∏ –¥–ª—è enable_additional_filters
            # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤ get_optimization_parameters
        
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            param_space = {
                "vol_period": ("int", int(vol_period_min), int(vol_period_max)),
                "vol_pctl": ("float", round(float(vol_pctl_min), 2), round(float(vol_pctl_max), 2)),
                "range_period": ("int", int(range_period_min), int(range_period_max)),
                "rng_pctl": ("float", round(float(rng_pctl_min), 2), round(float(rng_pctl_max), 2)),
                "natr_period": ("int", int(natr_period_min), int(natr_period_max)),
                "natr_min": ("float", round(float(natr_min_min), 2), round(float(natr_min_max), 2)),
                "lookback_period": ("int", int(lookback_period_min), int(lookback_period_max)),
                "min_growth_pct": ("float", round(float(min_growth_pct_min), 2), round(float(min_growth_pct_max), 2)),
                "prints_analysis_period": ("int", int(prints_analysis_period_min), int(prints_analysis_period_max)),
                "prints_threshold_ratio": ("float", round(float(prints_threshold_ratio_min), 2), round(float(prints_threshold_ratio_max), 2)),  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∂–∏–º–µ 1
                "stop_loss_pct": ("float", round(float(stop_loss_pct_min), 2), round(float(stop_loss_pct_max), 2)),
                "take_profit_pct": ("float", round(float(take_profit_pct_min), 2), round(float(take_profit_pct_max), 2)),
                "hldir_window": ("int", int(hldir_window_min), int(hldir_window_max)),  # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è HLdir
                "hldir_offset": ("int", int(hldir_offset_min), int(hldir_offset_max)),
                "enable_additional_filters": ("categorical", [False, True])  # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ –æ–±–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if entry_logic_mode_optimization == "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å":
                param_space["entry_logic_mode"] = ("categorical", ["–ü—Ä–∏–Ω—Ç—ã –∏ HLdir", "–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–Ω—Ç–∞–º", "–¢–æ–ª—å–∫–æ –ø–æ HLdir"])
            else:
                param_space["entry_logic_mode"] = ("categorical", [entry_logic_mode_optimization])

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Optuna
            try:
                
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Optuna")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                opt_params = {
                    'data': combined_df,
                    'param_space': param_space,
                    'n_trials': optuna_trials,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–± –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    'direction': 'maximize',
                    'optimization_type': 'optuna',
                    'position_size': position_size,
                    'commission': commission,
                    'stop_loss_pct': stop_loss_pct_min,
                    'aggressive_mode': st.session_state.get("aggressive_mode_optimization", False),
                    'take_profit_pct': take_profit_pct_min,
                    'strategy_func': objective_func # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                opt_results = wfo_optuna.run_optimization(opt_params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if opt_results and opt_results.get('best_value') is not None:
                    st.success(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {opt_results['best_value']:.4f}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    st.subheader("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    best_params_df = pd.DataFrame(list(opt_results['best_params'].items()), columns=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
                    st.dataframe(best_params_df, use_container_width=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if 'top_10_results' in opt_results and opt_results['top_10_results']:
                        st.subheader("–¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                        top_10_df = pd.DataFrame(opt_results['top_10_results'])
                        st.dataframe(top_10_df, use_container_width=True)
                else:
                    st.error("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—ã—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                if len(selected_files) == 1:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏—Ä–µ
                    filename = selected_files[0]
                    dash_pos = filename.find('-')
                    data_prefix = filename[:dash_pos] if dash_pos != -1 else filename.rsplit('.', 1)[0]
                elif len(selected_files) > 1:
                    data_prefix = "ALL"
                else:
                    data_prefix = ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
                def extract_numeric_value(value_str):
                    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ"""
                    if value_str is None or (isinstance(value_str, float) and np.isnan(value_str)):
                        return 0
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º numpy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
                    if hasattr(value_str, 'dtype') and np.issubdtype(value_str.dtype, np.number):
                        value_str = value_str.item()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∞–ª—è—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ numpy —Å–∫–∞–ª—è—Ä–∞
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    numeric_str = ''.join(filter(lambda x: x.isdigit() or x == '.', str(value_str).replace('$', '').replace('%', '').replace('-', '')))
                    try:
                        return int(float(numeric_str) + 0.5)
                    except ValueError:
                        return 0
                
                best_value = extract_numeric_value(opt_results.get('best_value'))
                
                # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ 1 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
                mode_suffix = "_mode1"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_run_name = f"run_{timestamp}_{data_prefix}{mode_suffix}_${best_value}_OPTUNA"
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                ranges_dict = {
                    "vol_period_min": int(vol_period_min),
                    "vol_period_max": int(vol_period_max),
                    "vol_pctl_min": round(float(vol_pctl_min), 2),
                    "vol_pctl_max": round(float(vol_pctl_max), 2),
                    "range_period_min": int(range_period_min),
                    "range_period_max": int(range_period_max),
                    "rng_pctl_min": round(float(rng_pctl_min), 2),
                    "rng_pctl_max": round(float(rng_pctl_max), 2),
                    "natr_period_min": int(natr_period_min),
                    "natr_period_max": int(natr_period_max),
                    "natr_min_min": round(float(natr_min_min), 2),
                    "natr_min_max": round(float(natr_min_max), 2),
                
                    "lookback_period_min": int(lookback_period_min),
                    "lookback_period_max": int(lookback_period_max),
                    "min_growth_pct_min": round(float(min_growth_pct_min), 2),
                    "min_growth_pct_max": round(float(min_growth_pct_max), 2),
                    "prints_analysis_period_min": int(prints_analysis_period_min),
                    "prints_analysis_period_max": int(prints_analysis_period_max),
                    "stop_loss_pct_min": round(float(stop_loss_pct_min), 2),
                    "stop_loss_pct_max": round(float(stop_loss_pct_max), 2),
                    "take_profit_pct_min": round(float(take_profit_pct_min), 2),
                    "take_profit_pct_max": round(float(take_profit_pct_max), 2),
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è hldir_window
                    "hldir_window_min": int(hldir_window_min),
                    "hldir_window_max": int(hldir_window_max),
                    "hldir_offset_min": int(hldir_offset_min),
                    "hldir_offset_max": int(hldir_offset_max),
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º Z-score –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    "prints_threshold_ratio_min": round(float(prints_threshold_ratio_min), 2),
                    "prints_threshold_ratio_max": round(float(prints_threshold_ratio_max), 2)
                }
                
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
                optuna_results = []
                if opt_results and opt_results.get('best_params'):
                    result_entry = opt_results['best_params'].copy()
                    result_entry['ID'] = 1
                    result_entry['in_sample_metric'] = opt_results.get('best_value', 0)
                    result_entry['out_sample_metric'] = opt_results.get('best_value', 0)  # –î–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ in-sample –∏ out-sample –æ–¥–∏–Ω–∞–∫–æ–≤—ã
                    result_entry['end_date'] = str(combined_df['datetime'].iloc[-1])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    result_entry['Total Trades'] = 0 # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏
                    result_entry['PnL'] = f"${opt_results.get('best_value', 0):.2f}"
                    result_entry['Win Rate'] = "0%"
                    result_entry['Max Drawdown'] = "0%"
                    result_entry['Sharpe Ratio'] = opt_results.get('best_value', 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç—Ä–∏–∫—É –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                    result_entry['Profit Factor'] = 1.0  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    
                    optuna_results.append(result_entry)
                
                run_data = {
                    "run_name": new_run_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                    "timestamp": datetime.now().isoformat(),
                    "ranges": ranges_dict,
                    "settings": {
                        "position_size": position_size,
                        "commission": commission,
                        "start_date": str(start_date),
                        "end_date": str(end_date)
                    },
                    "data_files": selected_files, # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                    "results": optuna_results,
                    "best_params": opt_results.get('best_params', {}),
                    "best_result": optuna_results[0] if optuna_results else {},
                    "optimization_type": "optuna", # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    "top_10_results": opt_results.get('top_10_results', [])  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                }
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy —Ç–∏–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                def convert_numpy_types(obj):
                    if isinstance(obj, np.integer):
                        return int(obj)
                    elif isinstance(obj, np.floating):
                        return float(obj)
                    elif isinstance(obj, np.ndarray):
                        return obj.tolist()
                    elif isinstance(obj, dict):
                        return {key: convert_numpy_types(value) for key, value in obj.items()}
                    elif isinstance(obj, list):
                        return [convert_numpy_types(item) for item in obj]
                    else:
                        return obj
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                run_data_converted = convert_numpy_types(run_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
                try:
                    os.makedirs("optimization_runs", exist_ok=True)
                    with open(f"optimization_runs/{new_run_name}.json", 'w', encoding='utf-8') as f:
                        json.dump(run_data_converted, f, ensure_ascii=False, indent=2)
                
                    st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ '{new_run_name}'")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
            
            

elif current_page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    st.subheader("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–≥–æ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    run_files = get_optimization_run_files()
    
    if run_files:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–æ–Ω—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä—è–¥
        for run_file in run_files:
            run_name = run_file.replace('.json', '')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            run_data = load_run_data_cached(run_file)
            if run_data is None:
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ top_10_results[0], –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–ª–∏ –∏–∑ best_params —Å –ø–æ–º–æ—â—å—é —Å–∏–º—É–ª—è—Ü–∏–∏
            top_results = run_data.get("top_10_results", [])
            if top_results:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ top_10_results, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                best_result = top_results[0]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                total_pnl = best_result.get('PnL', 0) or best_result.get('total_pnl', 0)
                if total_pnl is None or (isinstance(total_pnl, float) and np.isnan(total_pnl)):
                    pnl = 'N/A'
                else:
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–æ–ª–ª–∞—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    if isinstance(total_pnl, str):
                        pnl = total_pnl
                    else:
                        pnl = f"${total_pnl:.2f}"
                
                win_rate = best_result.get('Win Rate', 0) or best_result.get('win_rate', 0)
                if win_rate is None or (isinstance(win_rate, float) and np.isnan(win_rate)):
                    win_rate_formatted = 'N/A'
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å win_rate —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                    if isinstance(win_rate, str) and win_rate.endswith('%'):
                        win_rate_formatted = win_rate
                    elif isinstance(win_rate, (int, float)):
                        # win_rate –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.65),
                        # –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–º–Ω–æ–∂–µ–Ω–Ω—ã–º –Ω–∞ 100 –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        if win_rate > 1:
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1, —Ç–æ –æ–Ω–æ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                            win_rate_formatted = f"{win_rate:.2f}%"
                        else:
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ <= 1, —Ç–æ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥–æ–ª—è, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100
                            win_rate_formatted = f"{round(win_rate * 100, 2):.2f}%"
                    else:
                        win_rate_formatted = 'N/A'
            else:
                # –ï—Å–ª–∏ top_10_results –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ best_params –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                best_result = run_data.get("best_result", {})
                if best_result:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ best_result
                    total_pnl = best_result.get('total_pnl', 0)
                    if total_pnl is None or (isinstance(total_pnl, float) and np.isnan(total_pnl)):
                        pnl = 'N/A'
                    else:
                        pnl = f"${total_pnl:.2f}"
                    
                    win_rate = best_result.get('win_rate', 0)
                    if win_rate is None or (isinstance(win_rate, float) and np.isnan(win_rate)):
                        win_rate_formatted = 'N/A'
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å win_rate —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                        if isinstance(win_rate, str) and win_rate.endswith('%'):
                            win_rate_formatted = win_rate
                        elif isinstance(win_rate, (int, float)):
                            # win_rate –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.65),
                            # –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–º–Ω–æ–∂–µ–Ω–Ω—ã–º –Ω–∞ 100 –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                            if win_rate > 1:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1, —Ç–æ –æ–Ω–æ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                                win_rate_formatted = f"{win_rate:.2f}%"
                            else:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ <= 1, —Ç–æ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥–æ–ª—è, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 10
                                win_rate_formatted = f"{round(win_rate * 100, 2):.2f}%"
                        else:
                            win_rate_formatted = 'N/A'
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                    total_pnl = run_data.get('PnL', 0) or run_data.get('total_pnl', 0)
                    if total_pnl is None or (isinstance(total_pnl, float) and np.isnan(total_pnl)):
                        pnl = 'N/A'
                    else:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–æ–ª–ª–∞—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        if isinstance(total_pnl, str):
                            pnl = total_pnl
                        else:
                            pnl = f"${total_pnl:.2f}"
                    
                    win_rate = run_data.get('Win Rate', 0) or run_data.get('win_rate', 0)
                    if win_rate is None or (isinstance(win_rate, float) and np.isnan(win_rate)):
                        win_rate_formatted = 'N/A'
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å win_rate —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                        if isinstance(win_rate, str) and win_rate.endswith('%'):
                            win_rate_formatted = win_rate
                        elif isinstance(win_rate, (int, float)):
                            # win_rate –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.65),
                            # –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–º–Ω–æ–∂–µ–Ω–Ω—ã–º –Ω–∞ 100 –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                            if win_rate > 1:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1, —Ç–æ –æ–Ω–æ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                                win_rate_formatted = f"{win_rate:.2f}%"
                            else:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ <= 1, —Ç–æ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥–æ–ª—è, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100
                                win_rate_formatted = f"{round(win_rate * 100, 2):.2f}%"
                        else:
                            win_rate_formatted = 'N/A'
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with st.container():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º columns –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫
                cols = st.columns([1, 3, 2, 2, 2])  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É: –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, 2 –∫–Ω–æ–ø–∫–∏, –º–µ—Ç—Ä–∏–∫–∏
                
                with cols[0]:
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    show_results_key = f"show_results_{run_name}"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ False
                    if show_results_key not in st.session_state:
                        st.session_state[show_results_key] = False
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–Ω–∞ –Ω–∞–∂–∞—Ç–∞
                    button_label = "‚ñº" if st.session_state[show_results_key] else "‚ñ∂"
                    if st.button(button_label, key=show_results_key + "_button"):
                        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
                        st.session_state[show_results_key] = not st.session_state[show_results_key]
                    
                with cols[1]:
                    st.markdown(f"**{run_name}**")
                    
                with cols[2]:
                    if st.button(f"‚Üí –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", key=f"optimizer_{run_name}"):
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–æ–¥—É–ª—å 2
                        if run_data is not None:
                            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                            optimization_data = {**run_data.get("ranges", {}), **run_data.get("settings", {})}
                            load_profile_to_session_state(optimization_data, "optimization")
                            
                            st.session_state["page"] = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
                            st.rerun()
                            
                with cols[3]:
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞, –∫–Ω–æ–ø–∫–∞ "–í –∞–Ω–∞–ª–∏–∑" –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    if run_data is not None and "results" in run_data and st.session_state.get(f"show_results_{run_name}", False):
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–Ω–∞–ª–∏–∑ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        st.caption("‚Üí –ê–Ω–∞–ª–∏–∑ (–∏–∑ —Ç–∞–±–ª.)")
                    else:
                        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if st.button(f"‚Üí –ê–Ω–∞–ª–∏–∑", key=f"analysis_from_run_{run_name}"):
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª—É—á—à–∏–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–¥—É–ª—å 1
                            if run_data is not None:
                                # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                                best_params = run_data.get("best_params", {})
                                analysis_data = {k: v for k, v in best_params.items() if k != 'ID'}  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ID, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                                analysis_data.update(run_data.get("settings", {}))
                                
                                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Streamlit
                                for key, value in analysis_data.items():
                                    if isinstance(value, float) and key not in ['position_size', 'commission', 'stop_loss_pct', 'take_profit_pct', 'vol_pctl', 'rng_pctl', 'natr_min', 'min_growth_pct', 'prints_threshold_ratio']:
                                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - float, –Ω–æ –∫–ª—é—á –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ float-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                                        if not key.endswith('_analysis'):
                                            try:
                                                analysis_data[key] = int(value)
                                            except (ValueError, TypeError):
                                                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                    elif isinstance(value, int) and key in ['position_size', 'commission', 'stop_loss_pct', 'take_profit_pct', 'vol_pctl', 'rng_pctl', 'natr_min', 'min_growth_pct', 'prints_threshold_ratio']:
                                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - int, –Ω–æ –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ float-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                                        analysis_data[key] = float(value)
                                        
                                load_profile_to_session_state(analysis_data, "analysis")
                                
                                st.session_state["page"] = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
                                st.rerun()
                
                with cols[4]:
                    st.caption(f"PnL: {pnl}, WR: {win_rate_formatted}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
            if st.session_state[show_results_key]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ top_10_results (–¥–ª—è Optuna) –∏–ª–∏ –≤ results (–¥–ª—è WFO)
                if run_data is not None:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    if "top_10_results" in run_data and run_data["top_10_results"]:
                        # –î–ª—è Optuna —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º top_10_results
                        results_data = run_data["top_10_results"]
                        # –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        for i, result in enumerate(results_data):
                            if 'ID' not in result:
                                result['ID'] = i + 1
                        results_df = pd.DataFrame(results_data)
                    elif "results" in run_data and run_data["results"]:
                        # –î–ª—è WFO —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º results
                        results_df = pd.DataFrame(run_data["results"])
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    
                    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    desired_order = [
                        "ID",
                        "Total Trades", "PnL", "Win Rate", "Max Drawdown", "Sharpe Ratio", "Profit Factor",
                        "vol_pctl", "vol_period", "rng_pctl", "range_period", "natr_min", "natr_period",
                        "min_growth_pct", "lookback_period", "prints_analysis_period", "prints_threshold_ratio",
                        "stop_loss_pct", "take_profit_pct"
                    ]
                    
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ desired_order –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ DataFrame
                    available_columns = [col for col in desired_order if col in results_df.columns]
                    # –î–æ–±–∞–≤–∏–º –ª—é–±—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ desired_order, –≤ –∫–æ–Ω–µ—Ü
                    additional_columns = [col for col in results_df.columns if col not in desired_order]
                    final_order = available_columns + additional_columns
                    
                    results_df_display = results_df[final_order]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∂–∏–º 1)
                    display_df = results_df_display.copy()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    selected_result_key = f"selected_result_{run_name}"
                    cols = st.columns([1, 8])  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                    with cols[0]:
                        st.write("**–î–µ–π—Å—Ç–≤–∏—è**")
                        for i in range(len(results_df)):
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                            result_row = results_df.iloc[i]
                            result_id = result_row.get('ID', i+1)
                            pnl = result_row.get('PnL', 'N/A')
                            win_rate = result_row.get('Win Rate', 'N/A')
                            
                            # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∞–Ω–∞–ª–∏–∑
                            if st.button(f"{result_id}\n{pnl}\n{win_rate}", key=f"select_{run_name}_result_{i}"):
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                                selected_params = {k: v for k, v in result_row.items() if k != 'ID'}  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ID, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                                selected_params.update(run_data.get("settings", {}))
                                load_profile_to_session_state(selected_params, "analysis")
                                
                                st.session_state["page"] = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
                                st.rerun()
                                
                    with cols[1]:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤
                        st.dataframe(display_df, use_container_width=True)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            st.markdown("---")
    else:
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")