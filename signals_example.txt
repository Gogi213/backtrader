# Углубленный анализ формирования сигналов, стопов и тейков в проекте EXAMPLE

Этот документ предоставляет детальный разбор логики торговой системы на основе ваших вопросов.

---

## 1. Источники данных: Откуда берутся `hldir` и `prints`?

**Ответ:** Значения `long_prints`, `short_prints` и `HLdir` **не рассчитываются** внутри скриптов `signal_generator.py` или `trading_simulator.py`. Система ожидает, что эти данные **уже присутствуют** во входном DataFrame, который передается в симулятор.

Это означает, что существует предварительный этап обработки данных, на котором эти значения вычисляются и добавляются к исходным рыночным данным (OHLCV). В предоставленных файлах этот этап не показан.

**Фрагмент кода из `trading_simulator.py` (строки 179-182):**
```python
long_prints_values = df['long_prints'].values if 'long_prints' in df.columns else None
short_prints_values = df['short_prints'].values if 'short_prints' in df.columns else None
hldir_values = df['HLdir'].values if 'HLdir' in entry_logic_mode and 'HLdir' in df.columns else None
```
Этот код напрямую извлекает данные из DataFrame `df`, подтверждая, что они являются входными.

---

## 2. Формулы ATR и NATR

Анализ файла `signal_generator.py` показывает следующие реализации:

### 2.1. True Range (TR)
- **Формула:** `TR = max[(high - low), abs(high - close_prev), abs(low - close_prev)]`
- **Реализация в коде (строки 7-23):**
  ```python
  def calculate_true_range(high, low, close):
      close_prev = np.roll(close, 1)
      tr = np.maximum.reduce([high - low, np.abs(high - close_prev), np.abs(low - close_prev)])
      tr[0] = high[0] - low[0] # Для первого значения в истории
      return tr
  ```

### 2.2. Average True Range (ATR)
- **Логика:** ATR рассчитывается с использованием экспоненциального скользящего среднего (EMA), что соответствует стандартной методике Уайлдера (Wilder's Smoothing / MMA).
- **Реализация в коде (строки 26-34):**
  ```python
  def calculate_atr(high, low, close, period):
      tr = calculate_true_range(high, low, close)
      # Используется ewm (exponentially weighted moving average) из pandas
      atr = pd.Series(tr).ewm(alpha=1/period, adjust=False, min_periods=period).mean().values
      return atr
  ```

### 2.3. Normalized Average True Range (NATR)
- **Логика:** NATR представляет собой ATR, нормализованный относительно цены закрытия, и выражается в процентах.
- **Формула:** `NATR = (ATR / close) * 100`
- **Реализация в коде (строки 37-53):**
  ```python
  def calculate_natr(high, low, close, period):
      atr = calculate_atr(high, low, close, period)
      natr = np.divide(atr, close, out=np.full_like(close, np.nan), where=close!=0) * 100
      return natr
  ```

---

## 3. Механизм срабатывания стоп-лосса и тейк-профита

**Ответ:** Стоп-лосс и тейк-профит срабатывают на основе цен `high` и `low` свечей, которые формируются **после** входа в позицию.

**Логика из `trading_simulator.py` (строки 306-321):**

1.  После входа в сделку на свече `entry_idx` система анализирует все последующие свечи.
2.  Для каждой будущей свечи проверяется, достигла ли цена уровней стопа или тейка.

-   **Для LONG позиции:**
    -   **Стоп-лосс сработает**, если `low` цена свечи опустится до или ниже уровня `stop_loss`: `future_lows <= stop_loss`.
    -   **Тейк-профит сработает**, если `high` цена свечи поднимется до или выше уровня `take_profit`: `future_highs >= take_profit`.

-   **Для SHORT позиции:**
    -   **Стоп-лосс сработает**, если `high` цена свечи поднимется до или выше уровня `stop_loss`: `future_highs >= stop_loss`.
    -   **Тейк-профит сработает**, если `low` цена свечи опустится до или ниже уровня `take_profit`: `future_lows <= take_profit`.

**Цена исполнения:** Сделка закрывается по цене самого уровня стоп-лосса или тейк-профита, а не по цене закрытия свечи. Это является стандартной и более точной практикой для бэктестинга.

---

## 4. Оценка корректности формул и рыночного поведения

-   **Формулы ATR/NATR:** Реализация `ATR` через `ewm` с `alpha=1/period` и `adjust=False` является **корректным** и общепринятым способом расчета сглаженного среднего, используемого в классическом индикаторе ATR. Формула `NATR` также стандартна.

-   **Логика входа:** Вход в позицию по цене открытия (`open`) свечи, следующей за сигнальной, является **корректной практикой**, которая исключает "заглядывание в будущее" (lookahead bias).

-   **Логика выхода (SL/TP):** Проверка стоп-лосса по `low` (для лонга) и `high` (для шорта), а тейк-профита — наоборот, **полностью соответствует реальному рыночному поведению**. Ордера исполняются, как только цена касается заданного уровня.

-   **Общая архитектура:**
    -   **Сильная сторона:** Механика симуляции (вход, выход, проверка SL/TP) реализована корректно и надежно.
    -   **Слабая сторона / Особенность:** Зависимость от предварительно рассчитанных `prints` и `HLdir` делает стратегию не полностью автономной. Ее нельзя запустить, имея только "чистые" OHLCV данные, без дополнительного шага их обогащения.

**Вывод:** С точки зрения технической реализации бэктеста, формулы и симуляция рыночного поведения **корректны**. Стратегические решения (например, использование `HLdir` или условия генерации сигнала) являются особенностями данной торговой системы, а не вопросом общей корректности.

---

## 5. Полный список параметров и их значений по умолчанию

Ниже приведены все параметры стратегии, сгруппированные по функциональным блокам, с их значениями по умолчанию, как указано в исходном коде.

### 5.1. Параметры генерации сигнала (`signal_generator.py`)
- `vol_period`: `20` (период для анализа объема)
- `vol_pctl`: `1.0` (%) (процентиль объема)
- `range_period`: `20` (период для анализа диапазона)
- `rng_pctl`: `1.0` (%) (процентиль диапазона)
- `natr_period`: `10` (период для NATR)
- `natr_min`: `0.35` (%) (минимальный порог NATR)
- `lookback_period`: `20` (период для фильтра роста)
- `min_growth_pct`: `1.0` (%) (минимальный порог роста)

### 5.2. Параметры логики входа и фильтров (`trading_simulator.py`, `strategy_objectives.py`)
- `entry_logic_mode`: `"Принты и HLdir"` (режим определения направления)
- `prints_analysis_period`: `2` (период анализа принтов)
- `prints_threshold_ratio`: `1.0` (порог соотношения принтов)
- `hldir_window`: `10` (окно для скользящего среднего HLdir)
- `hldir_offset`: `0` (смещение для HLdir)

### 5.3. Параметры управления позицией и риском (`trading_simulator.py`, `strategy_objectives.py`)
- `stop_loss_pct`: `2.0` (%)
- `take_profit_pct`: `4.0` (%)
- `position_size`: `100.0` (USD) — *значение по умолчанию в целевой функции оптимизации. В `run_trading_simulation` по умолчанию `100.0`.*
- `commission`: `0.05` (%)

### 5.5. Параметры симуляции (`strategy_objectives.py`)
- `aggressive_mode`: `False` (разрешать ли открытие новой сделки до закрытия старой)(пирамидинг запрещен)