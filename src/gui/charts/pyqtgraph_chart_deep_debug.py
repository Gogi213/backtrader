"""
–ì–õ–£–ë–û–ß–ê–ô–®–ò–ô DEBUG VERSION pyqtgraph_chart.py —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
"""
import numpy as np
import pandas as pd
import pyqtgraph as pg
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont
from datetime import datetime


class HighPerformanceChart(QWidget):
    """
    Ultra-fast chart component optimized for 500k+ data points
    Uses PyQtGraph for maximum rendering performance
    """

    def __init__(self):
        super().__init__()
        self.plot_widget = None
        self.price_curve = None
        self.bb_upper_curve = None
        self.bb_middle_curve = None
        self.bb_lower_curve = None
        self.bb_fill = None
        self.buy_scatter = None
        self.sell_scatter = None

        # Performance optimizations
        self.max_display_points = 500000  # Maximum points to display
        self.downsample_threshold = 100000  # Start downsampling above this

        self._init_ui()
        self._setup_performance_optimizations()

    def _init_ui(self):
        """Initialize high-performance chart UI"""
        layout = QVBoxLayout(self)

        # Chart info bar
        info_layout = QHBoxLayout()
        self.info_label = QLabel("HFT Chart - Ready")
        self.info_label.setFont(QFont("Consolas", 9))
        self.info_label.setStyleSheet("color: #888888; padding: 5px;")

        self.performance_label = QLabel("Performance: -")
        self.performance_label.setFont(QFont("Consolas", 9))
        self.performance_label.setStyleSheet("color: #888888; padding: 5px;")

        info_layout.addWidget(self.info_label)
        info_layout.addStretch()
        info_layout.addWidget(self.performance_label)

        layout.addLayout(info_layout)

        # Create high-performance plot widget with time axis
        axis = pg.DateAxisItem(orientation='bottom')
        self.plot_widget = pg.PlotWidget(
            title="HFT Price Chart - Bollinger Bands Strategy",
            labels={'left': 'Price (USDT)', 'bottom': 'Time'},
            axisItems={'bottom': axis}
        )

        # Configure plot for maximum performance
        self.plot_widget.setBackground('#2b2b2b')
        self.plot_widget.getAxis('left').setTextPen('#ffffff')
        self.plot_widget.getAxis('bottom').setTextPen('#ffffff')
        self.plot_widget.getAxis('left').setPen('#555555')
        self.plot_widget.getAxis('bottom').setPen('#555555')

        # Enable OpenGL for maximum performance
        self.plot_widget.setAntialiasing(False)  # Disable for performance

        layout.addWidget(self.plot_widget)

    def _setup_performance_optimizations(self):
        """Setup performance optimizations for large datasets"""
        # Enable OpenGL rendering for maximum speed
        try:
            pg.setConfigOptions(useOpenGL=True)
            pg.setConfigOptions(enableExperimental=True)
            pg.setConfigOptions(antialias=False)  # Disable for performance
        except:
            pass  # OpenGL might not be available

        # Configure plot widget optimizations
        self.plot_widget.setClipToView(True)  # Only render visible data
        self.plot_widget.setDownsampling(mode='peak')  # Smart downsampling

        # Disable automatic range updates for performance
        self.plot_widget.enableAutoRange(enable=False)

        # Set view limits for large datasets
        self.plot_widget.setLimits(maxXRange=self.max_display_points)

    def update_chart(self, results_data):
        """
        –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô DEBUG VERSION: Update chart with –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
        """
        print("\n" + "="*100)
        print("üî• –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô DEBUG: update_chart() –ù–ê–ß–ê–¢!")
        print("="*100)

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"[DEBUG-001] results_data type: {type(results_data)}")
        print(f"[DEBUG-002] results_data is None: {results_data is None}")
        print(f"[DEBUG-003] results_data bool: {bool(results_data)}")

        if not results_data:
            print("‚ùå [DEBUG-004] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: results_data –ø—É—Å—Ç–∞—è!")
            self.info_label.setText("NO DATA - results_data empty")
            return

        print(f"‚úÖ [DEBUG-005] results_data —Å–æ–¥–µ—Ä–∂–∏—Ç {len(results_data)} –∫–ª—é—á–µ–π")
        print(f"[DEBUG-006] results_data –∫–ª—é—á–∏: {list(results_data.keys())}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ bb_data
        bb_data = results_data.get('bb_data')
        print(f"[DEBUG-007] bb_data –∏–∑–≤–ª–µ—á–µ–Ω: {bb_data is not None}")
        print(f"[DEBUG-008] bb_data type: {type(bb_data)}")

        if not bb_data:
            print("‚ùå [DEBUG-009] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: bb_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            self.info_label.setText("NO BB DATA")
            return

        print(f"‚úÖ [DEBUG-010] bb_data —Å–æ–¥–µ—Ä–∂–∏—Ç {len(bb_data)} –∫–ª—é—á–µ–π")
        print(f"[DEBUG-011] bb_data –∫–ª—é—á–∏: {list(bb_data.keys())}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ['times', 'prices']
        for key in required_keys:
            if key not in bb_data:
                print(f"‚ùå [DEBUG-012] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}'!")
                self.info_label.setText(f"MISSING KEY: {key}")
                return
            print(f"‚úÖ [DEBUG-013] –ö–ª—é—á '{key}' –Ω–∞–π–¥–µ–Ω")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 4: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ü–µ–Ω
        times_raw = bb_data['times']
        prices_raw = bb_data['prices']

        print(f"[DEBUG-014] times_raw type: {type(times_raw)}")
        print(f"[DEBUG-015] times_raw length: {len(times_raw)}")
        print(f"[DEBUG-016] times_raw first 3: {times_raw[:3] if len(times_raw) > 0 else 'EMPTY'}")

        print(f"[DEBUG-017] prices_raw type: {type(prices_raw)}")
        print(f"[DEBUG-018] prices_raw length: {len(prices_raw)}")
        print(f"[DEBUG-019] prices_raw first 3: {prices_raw[:3] if len(prices_raw) > 0 else 'EMPTY'}")

        if len(times_raw) == 0 or len(prices_raw) == 0:
            print("‚ùå [DEBUG-020] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö!")
            self.info_label.setText("EMPTY ARRAYS")
            return

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 5: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"[DEBUG-021] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ times –≤ numpy array...")
        times_ms = np.array(times_raw, dtype=np.float64)
        print(f"[DEBUG-022] times_ms shape: {times_ms.shape}")
        print(f"[DEBUG-023] times_ms dtype: {times_ms.dtype}")
        print(f"[DEBUG-024] times_ms range: {times_ms.min():.0f} - {times_ms.max():.0f}")

        print(f"[DEBUG-025] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ prices –≤ numpy array...")
        prices = np.array(prices_raw, dtype=np.float32)
        print(f"[DEBUG-026] prices shape: {prices.shape}")
        print(f"[DEBUG-027] prices dtype: {prices.dtype}")
        print(f"[DEBUG-028] prices range: {prices.min():.6f} - {prices.max():.6f}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 6: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
        print(f"[DEBUG-029] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è milliseconds -> seconds...")
        times_sec = times_ms / 1000.0
        print(f"[DEBUG-030] times_sec shape: {times_sec.shape}")
        print(f"[DEBUG-031] times_sec range: {times_sec.min():.6f} - {times_sec.max():.6f}")
        print(f"[DEBUG-032] times_sec first 3: {times_sec[:3]}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN/Inf
        times_nan_count = np.isnan(times_sec).sum()
        times_inf_count = np.isinf(times_sec).sum()
        prices_nan_count = np.isnan(prices).sum()
        prices_inf_count = np.isinf(prices).sum()

        print(f"[DEBUG-033] times_sec NaN: {times_nan_count}")
        print(f"[DEBUG-034] times_sec Inf: {times_inf_count}")
        print(f"[DEBUG-035] prices NaN: {prices_nan_count}")
        print(f"[DEBUG-036] prices Inf: {prices_inf_count}")

        if times_nan_count > 0 or times_inf_count > 0 or prices_nan_count > 0 or prices_inf_count > 0:
            print("‚ö†Ô∏è  [DEBUG-037] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 8: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"[DEBUG-038] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        valid_mask = ~(np.isnan(prices) | np.isnan(times_sec))
        times_clean = times_sec[valid_mask]
        prices_clean = prices[valid_mask]

        print(f"[DEBUG-039] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(times_clean)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏–∑ {len(times_sec)}")
        print(f"[DEBUG-040] times_clean range: {times_clean.min():.6f} - {times_clean.max():.6f}")
        print(f"[DEBUG-041] prices_clean range: {prices_clean.min():.6f} - {prices_clean.max():.6f}")

        if len(times_clean) == 0:
            print("‚ùå [DEBUG-042] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!")
            self.info_label.setText("NO VALID DATA")
            return

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 9: –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        print(f"[DEBUG-043] –û—á–∏—Å—Ç–∫–∞ plot_widget...")
        print(f"[DEBUG-044] plot_widget type: {type(self.plot_widget)}")
        print(f"[DEBUG-045] plot_widget –¥–æ –æ—á–∏—Å—Ç–∫–∏ items: {len(self.plot_widget.listDataItems())}")

        self.plot_widget.clear()

        print(f"[DEBUG-046] plot_widget –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ items: {len(self.plot_widget.listDataItems())}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 10: –°–æ–∑–¥–∞–Ω–∏–µ pen –¥–ª—è –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã
        print(f"[DEBUG-047] –°–æ–∑–¥–∞–Ω–∏–µ pen –¥–ª—è —Ü–µ–Ω—ã...")
        try:
            price_pen = pg.mkPen(color='#00aaff', width=2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            print(f"[DEBUG-048] price_pen —Å–æ–∑–¥–∞–Ω: {price_pen}")
            print(f"[DEBUG-049] price_pen color: {price_pen.color().name()}")
            print(f"[DEBUG-050] price_pen width: {price_pen.width()}")
        except Exception as e:
            print(f"‚ùå [DEBUG-051] –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è pen: {e}")
            return

        # üî• –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 11: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ - –°–û–ó–î–ê–ù–ò–ï –õ–ò–ù–ò–ò –¶–ï–ù–´
        print(f"\nüî• [DEBUG-052] –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã...")
        print(f"[DEBUG-053] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è plot():")
        print(f"[DEBUG-054]   x (times_clean): shape={times_clean.shape}, dtype={times_clean.dtype}")
        print(f"[DEBUG-055]   y (prices_clean): shape={prices_clean.shape}, dtype={prices_clean.dtype}")
        print(f"[DEBUG-056]   pen: {price_pen}")
        print(f"[DEBUG-057]   name: 'Price'")
        print(f"[DEBUG-058]   antialias: False")

        try:
            print(f"[DEBUG-059] –í—ã–∑–æ–≤ plot_widget.plot()...")

            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–´–ô –í–´–ó–û–í
            self.price_curve = self.plot_widget.plot(
                times_clean,
                prices_clean,
                pen=price_pen,
                name='DEEP_DEBUG_Price',
                antialias=False,
                connect='all',
                stepMode=None,
                fillLevel=None,
                brush=None
            )

            print(f"‚úÖ [DEBUG-060] plot() –≤–µ—Ä–Ω—É–ª: {self.price_curve}")
            print(f"[DEBUG-061] price_curve type: {type(self.price_curve)}")
            print(f"[DEBUG-062] price_curve –∏–º–µ–µ—Ç xData: {hasattr(self.price_curve, 'xData')}")
            print(f"[DEBUG-063] price_curve –∏–º–µ–µ—Ç yData: {hasattr(self.price_curve, 'yData')}")

            if hasattr(self.price_curve, 'xData') and hasattr(self.price_curve, 'yData'):
                x_data = self.price_curve.xData
                y_data = self.price_curve.yData
                print(f"[DEBUG-064] price_curve.xData: {x_data[:3] if x_data is not None and len(x_data) > 0 else 'None/Empty'}")
                print(f"[DEBUG-065] price_curve.yData: {y_data[:3] if y_data is not None and len(y_data) > 0 else 'None/Empty'}")
                print(f"[DEBUG-066] xData length: {len(x_data) if x_data is not None else 'None'}")
                print(f"[DEBUG-067] yData length: {len(y_data) if y_data is not None else 'None'}")

        except Exception as e:
            print(f"‚ùå [DEBUG-068] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ plot(): {e}")
            import traceback
            traceback.print_exc()
            return

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏
        print(f"\n[DEBUG-069] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã...")
        current_items = self.plot_widget.listDataItems()
        print(f"[DEBUG-070] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä–∞—Ñ–∏–∫–µ: {len(current_items)}")

        for i, item in enumerate(current_items):
            print(f"[DEBUG-071] –≠–ª–µ–º–µ–Ω—Ç {i}: {type(item).__name__}")
            if hasattr(item, 'name'):
                print(f"[DEBUG-072]   name: {item.name}")
            if hasattr(item, 'xData') and hasattr(item, 'yData'):
                x_data = item.xData
                y_data = item.yData
                x_len = len(x_data) if x_data is not None else 0
                y_len = len(y_data) if y_data is not None else 0
                print(f"[DEBUG-073]   data: x={x_len} points, y={y_len} points")

        if len(current_items) == 0:
            print("‚ùå [DEBUG-074] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã!")
        else:
            print(f"‚úÖ [DEBUG-075] –ì—Ä–∞—Ñ–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(current_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 13: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        print(f"\n[DEBUG-076] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞...")
        print(f"[DEBUG-077] X –¥–∏–∞–ø–∞–∑–æ–Ω: {times_clean.min():.6f} - {times_clean.max():.6f}")
        print(f"[DEBUG-078] Y –¥–∏–∞–ø–∞–∑–æ–Ω: {prices_clean.min():.6f} - {prices_clean.max():.6f}")

        try:
            print(f"[DEBUG-079] –í—ã–∑–æ–≤ setXRange()...")
            self.plot_widget.setXRange(times_clean.min(), times_clean.max(), padding=0.05)
            print(f"[DEBUG-080] setXRange() –≤—ã–ø–æ–ª–Ω–µ–Ω")

            print(f"[DEBUG-081] –í—ã–∑–æ–≤ setYRange()...")
            self.plot_widget.setYRange(prices_clean.min(), prices_clean.max(), padding=0.05)
            print(f"[DEBUG-082] setYRange() –≤—ã–ø–æ–ª–Ω–µ–Ω")

            print(f"[DEBUG-083] –í—ã–∑–æ–≤ autoRange()...")
            self.plot_widget.autoRange()
            print(f"[DEBUG-084] autoRange() –≤—ã–ø–æ–ª–Ω–µ–Ω")

        except Exception as e:
            print(f"‚ùå [DEBUG-085] –û–®–ò–ë–ö–ê —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {e}")

        # –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –õ–û–ì 14: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print(f"\n[DEBUG-086] –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê...")
        final_items = self.plot_widget.listDataItems()
        print(f"[DEBUG-087] –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(final_items)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ViewBox
        view_box = self.plot_widget.getViewBox()
        if view_box:
            print(f"[DEBUG-088] ViewBox –ø–æ–ª—É—á–µ–Ω: {type(view_box)}")
            try:
                state = view_box.getState()
                print(f"[DEBUG-089] ViewBox state –ø–æ–ª—É—á–µ–Ω")
                print(f"[DEBUG-090] viewRange: {state.get('viewRange', 'N/A')}")
                print(f"[DEBUG-091] targetRange: {state.get('targetRange', 'N/A')}")
                print(f"[DEBUG-092] autoRange: {state.get('autoRange', 'N/A')}")
            except Exception as e:
                print(f"[DEBUG-093] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ViewBox state: {e}")
        else:
            print(f"‚ùå [DEBUG-094] ViewBox –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.info_label.setText(f"DEEP DEBUG: {len(final_items)} items, {len(times_clean)} points")

        print(f"\n" + "="*100)
        print(f"üî• –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô DEBUG: update_chart() –ó–ê–í–ï–†–®–ï–ù!")
        print(f"–ò–¢–û–ì: {len(final_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∏–∑ {len(times_clean)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        print("="*100)

        return len(final_items) > 0

    def clear(self):
        """Clear chart data efficiently"""
        if self.plot_widget:
            self.plot_widget.clear()
            self.info_label.setText("Chart cleared")

    def get_widget(self):
        """Get the widget for integration"""
        return self